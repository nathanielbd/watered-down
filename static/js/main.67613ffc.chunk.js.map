{"version":3,"sources":["components/Intro.jsx","components/gallon.png","components/Stats.jsx","components/NavBar.jsx","App.js","registerServiceWorker.js","index.js"],"names":["styles","background","Intro","state","Jumbotron","style","Button","Component","title","getData","url","a","fetch","response","json","Stats","props","isLoading","this","userId","userData","gallons","reduce","sum","rec","appliances","apps","includes","concat","galPerApp","map","app","tot","setState","Spinner","Array","e","i","Image","src","gallon","fluid","width","height","Accordion","val","idx","Card","Header","Toggle","as","eventKey","Collapse","Body","href","routes","path","exact","main","Home","Tab1","Tab2","Tab3","NavigationBar","Navbar","Brand","Nav","Link","paddingTop","route","index","children","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.67613ffc.chunk.js","sourcesContent":["  \nimport React, { Component } from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\n\nconst styles = {\n    background: \"#B6DCFE\"\n}\nclass Intro extends Component \n{\n    state = {  }\n    render() \n    { \n        return ( \n        <div>\n            <Jumbotron style = {styles}>\n                <h1 >Welcome to Watered Down!</h1>\n                <p>\n                    Description.\n                </p>\n\n                <p>\n                    <Button >Learn More</Button>\n                </p>\n            </Jumbotron>\n        </div>\n         );\n    }\n}\nexport default Intro;","export default __webpack_public_path__ + \"static/media/gallon.e4a1883c.png\";","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\nimport gallon from './gallon.png';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Spinner from 'react-bootstrap/Spinner';\n\nconst styles = {\n  background: \"#B6DCFE\",\n}\nconst title = {\n  'font-size': \"2em\",\n}\nconst size = {\n  width: \"150px\",\n  height: \"150px\"\n}\n\nasync function getData(url) {\n\tconst response = await fetch(url);\n\treturn response.json()\n}\n\nclass Stats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoading: true };\n  }\n\n  async componentDidMount() {\n    const userData = await getData(`https://watered-down.zeet.app/api/user/${this.props.userId}`);\n    const gallons = userData.reduce((sum, rec) => sum + rec.gallons, 0);\n    const appliances = userData.reduce((apps, rec) => apps.includes(rec['application_id']) ? apps : apps.concat([rec['application_id']]), []);\n    const galPerApp = appliances.map((app) => userData.reduce((tot, rec) => rec['application_id']==app ? tot+rec['gallons'] : tot, 0));\n    this.setState({\n      gallons: gallons,\n      appliances: appliances,\n      galPerApp: galPerApp,\n      isLoading: false\n    });\n  }\n\n    render() { \n      if (this.state.isLoading) {\n        return <Spinner/>;\n      }\n        return ( \n          <div>\n            {[...Array(this.state.gallons),].map((e,i) =>{ \n              return <Image src= {gallon} fluid width = \"200\" height =\"300\"/>})}\n            <div style ={title}> Total Water Usage is {this.state.gallons} Gallons </div>\n            <h5> Select option below to view water usage for specific appliance: </h5>\n            <div>\n        <Accordion>\n            {this.state.appliances.map((val, idx) => {\n                return (\n                    <Card>\n                    <Card.Header>\n                        <Accordion.Toggle as ={Card.Header} eventKey={val}> \n                            {val}\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey={val}>\n                        <Card.Body>\n                            {[...Array(this.state.galPerApp[idx]),].map((e, i) =>{ \n                                return <Image src= {gallon} fluid width = \"200\" height =\"300\"/>})}\n                        </Card.Body>\n                    </Accordion.Collapse>\n                    </Card>\n            )})}\n        </Accordion>\n        </div>\n            <Button href=\"/2\" style ={styles}>Add Appliance</Button>\n          </div> );\n    }\n}\nexport default Stats;","import React, { Component } from \"react\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Intro from \"./Intro\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Stats from \"./Stats\";\n\nvar routes = \n[\n    {\n      path: \"/\",\n      exact: true,\n      main: () => <Home />,\n    },\n    {\n      path: \"/1\",\n      main: () => <Tab1 />,\n    },\n    {\n      path: \"/2\",\n      main: () => <Tab2 />,\n    },\n    {\n      path: \"/3\",\n      main: () => <Tab3 />,\n    },\n];\n\nfunction Home() \n{\n    return ( <Intro/>);\n}\nfunction Tab1() \n{\n    return ( <Stats userId=\"bob\"/>); \n}\nfunction Tab2() \n{\n    return ( <h2> second page </h2>);\n}\nfunction Tab3() \n{ \n    return ( <h2> third page </h2>);\n}\n\nexport default function NavigationBar() {\n  return (\n    <Router>\n      <div>\n        <Navbar>\n          <Navbar.Brand>Watered Down</Navbar.Brand>\n          <Nav>\n            <Nav.Link href=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"/1\">View Water Use</Nav.Link>\n            <Nav.Link href=\"/2\">Add Appliance</Nav.Link>\n            <Nav.Link href=\"/3\">Meet the Creators</Nav.Link>\n          </Nav>\n        </Navbar>\n        <Switch>\n          <div style={{ paddingTop: 20 }}>\n            {routes.map((route, index) => (\n              <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                children={<route.main />}\n              />\n            ))}\n          </div>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n","import React, { Component } from 'react';\nimport NavBar from './components/NavBar';\nimport './App.css';\nimport './bootstrap.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar /> \n        Created for Minnehack 2021\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}